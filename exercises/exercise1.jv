

// 1. This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file.

pipeline AirportsPipeline {
    // See here for meta-data of the data source
    // https://catalog.data.gov/dataset/electric-vehicle-population-data/resource/fa51be35-691f-45d2-9f3e-535877965e69

    // 2. We define the pipeline structure by referencing the blocks used.
    AirportsHttpExtractor
        -> AirportsTextFileInterpreter
        -> AirportsCSVInterpreter
        -> AirportsTableInterpreter;

    AirportsTableInterpreter
        -> AirportsSQLiteLoader;

    // 3. After the pipeline structure, we define the blocks used.
    block AirportsHttpExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
    }

    block AirportsTextFileInterpreter oftype TextFileInterpreter { }

    block AirportsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    }

    block AirportsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [

            // 4.Here we are using the column names from the CSV file
            // to define the schema of the SQLite table.
            // The types of the columns are inferred from the data.
            "Lfd. Nummer" oftype integer,
            "Name des Flughafens" oftype text,
            "Ort" oftype text,
            "Land" oftype text,
            "IATA" oftype IATACode,
            "ICAO" oftype ICAOCode,
            "Latitude" oftype decimal,
            "Longitude" oftype decimal,
            "Altitude" oftype integer,
            "Zeitzone" oftype decimal,
            "DST" oftype DSTCode,
            "Zeitzonen-Datenbank" oftype text,
            "geo_punkt" oftype text,
        ];
    }


    block AirportsSQLiteLoader oftype SQLiteLoader {
        table: "airports";
        file: "./airports.sqlite";
    }

}

valuetype IATACode oftype text {
    // 5. We define constraints on the IATA code to ensure it is valid according to the schema.
    constraints: [
        OnlyCapitalLettersAndDigits,
    ];
}

valuetype ICAOCode oftype text {
    // 6. We define constraints on the ICAO code to ensure it is valid according to the schema.
    constraints: [
        OnlyCapitalLettersAndDigits,    
    ];
}

valuetype DSTCode oftype text {
    // 7. We define constraints on the DST code to ensure it is valid according to the schema.
    constraints: [
        OnlyCapitalLettersAndDigits,
    ];
}

// 7. This constraint works on text valuetypes and requires values 
// to match a given regular expression in order to be valid.
constraint OnlyCapitalLettersAndDigits on text:
    value matches /^[A-Z0-9]*$/;

constraint OnlyCapitalLetters on text:
    value matches /^[A-Z]*$/;





