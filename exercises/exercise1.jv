// SPDX-FileCopyrightText: 2023 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only

// Example 2: Electric Vehicles
// Learning goals:
// - Understand further core concepts transforms and valuetypes
// - Understand how to construct a pipeline with multiple sinks
// - Understand the use of runtime parameters

// 1. This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file and a PostgreSQL db sink.
pipeline AirportsPipeline {
    // See here for meta-data of the data source
    // https://catalog.data.gov/dataset/electric-vehicle-population-data/resource/fa51be35-691f-45d2-9f3e-535877965e69

    // 2. At the top of a pipeline, we describe the
    // structure of the pipeline. The first part until 
    // the ElectricRangeTransformer is a linear sequence
    // of blocks. From there we can see a split into two
    // parallel sequences that load the data in to two
    // different sinks.
    AirportsHttpExtractor
        -> AirportsTextFileInterpreter
        -> AirportsCSVInterpreter
        -> AirportsTableInterpreter;
    
    AirportsTableInterpreter
        -> AirportsSQLiteLoader;

    // 3. After the pipeline structure, we define the blocks used.
    block AirportsHttpExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
    }

    block AirportsTextFileInterpreter oftype TextFileInterpreter { }

    block AirportsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    }

    block AirportsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            // 4. Here, a user-deifned valuetype is used to describe this column.
            // The capital letter indicates that the valuetype is not builtin
            // by convention. The valuetype itself is defined further below. 
            "Lfd. Nummer" oftype integer,
            "Name des Flughafens" oftype text,
            "Ort" oftype text,
            "Land" oftype text,
            "IATA" oftype IATACode,
            "ICAO" oftype ICAOCode,
            "Latitude" oftype decimal,
            "Longitude" oftype decimal,
            "Altitude" oftype integer,
            "Zeitzone" oftype decimal,
            "DST" oftype DSTCode,
            "Zeitzonen-Datenbank" oftype text,
            "geo_punkt" oftype text,
        ];
    }

    // 5. This block describes the application of a transform function
    // taking a column as input and adding another computed column.
    // The applied transform function is defined below and referenced 
    // by the "use" property.

    block AirportsSQLiteLoader oftype SQLiteLoader {
        table: "airports";
        file: "./airports.sqlite";
    }

}

valuetype IATACode oftype text {
    // 10. Valuetypes can be further refined by providing constraints.
    constraints: [
        OnlyCapitalLettersAndDigits,
    ];
}

valuetype ICAOCode oftype text {
    constraints: [
        OnlyCapitalLettersAndDigits,    
    ];
}

valuetype DSTCode oftype text {
    constraints: [
        OnlyCapitalLettersAndDigits,
    ];
}
// 11. This constraint works on text valuetypes and requires values 
// to match a given regular expression in order to be valid.
constraint OnlyCapitalLettersAndDigits on text:
    value matches /^[A-Z0-9]*$/;

constraint OnlyCapitalLetters on text:
    value matches /^[A-Z]*$/;





